import streamlit as st
import pandas as pd
from datetime import datetime
import os

# Nome do arquivo CSV para armazenar os dados
CSV_FILE = "controle_pdas.csv"

# Inicializar o DataFrame se o arquivo n칚o existir
def init_data():
    if not os.path.exists(CSV_FILE):
        df = pd.DataFrame(columns=[
            "Matr칤cula", 
            "Data Retirada", 
            "N칰mero PDA", 
            "Data Devolu칞칚o"
        ])
        df.to_csv(CSV_FILE, index=False)

# Carregar dados do CSV
def load_data():
    return pd.read_csv(CSV_FILE, parse_dates=["Data Retirada", "Data Devolu칞칚o"])

# Salvar dados no CSV
def save_data(df):
    df.to_csv(CSV_FILE, index=False)

# Verificar se usu치rio j치 tem PDA ativo
def usuario_tem_pda_ativo(df, matricula):
    filtro = (df["Matr칤cula"] == matricula) & (df["Data Devolu칞칚o"].isna())
    if not df[filtro].empty:
        return df[filtro].iloc[0]["N칰mero PDA"]
    return None

# Verificar se PDA j치 est치 emprestado
def pda_esta_emprestado(df, pda_num):
    filtro = (df["N칰mero PDA"] == pda_num) & (df["Data Devolu칞칚o"].isna())
    return not df[filtro].empty

# Interface Streamlit
def main():
    st.title("游님 Controle de PDAs")
    st.subheader("Registro de Entrada e Sa칤da de Equipamentos")
    
    init_data()
    df = load_data()
    
    # Sele칞칚o de opera칞칚o
    operacao = st.radio("Selecione a opera칞칚o:", 
                        ("Retirada de PDA", "Devolu칞칚o de PDA"),
                        horizontal=True)
    
    # Campos de entrada
    matricula = st.text_input("Matr칤cula:", max_chars=20).strip().upper()
    pda_num = st.text_input("N칰mero do PDA:", max_chars=20).strip().upper()
    
    # Bot칚o de confirma칞칚o
    if st.button("Confirmar Opera칞칚o"):
        if not matricula or not pda_num:
            st.error("Preencha todos os campos!")
            return
            
        if operacao == "Retirada de PDA":
            # Verifica se usu치rio j치 tem PDA ativo
            pda_ativo = usuario_tem_pda_ativo(df, matricula)
            if pda_ativo:
                st.error(f"ERRO: Usu치rio j치 possui PDA {pda_ativo} ativo!")
                return
                
            # Verifica se PDA j치 est치 emprestado
            if pda_esta_emprestado(df, pda_num):
                st.error(f"ERRO: PDA {pda_num} j치 est치 emprestado!")
                return
                
            # Registra nova retirada
            novo_registro = pd.DataFrame([{
                "Matr칤cula": matricula,
                "Data Retirada": datetime.now(),
                "N칰mero PDA": pda_num,
                "Data Devolu칞칚o": None
            }])
            
            df = pd.concat([df, novo_registro], ignore_index=True)
            save_data(df)
            st.success(f"PDA {pda_num} retirado com sucesso!")
            
        else:  # Devolu칞칚o
            # Encontra registro correspondente
            filtro = (df["Matr칤cula"] == matricula) & \
                     (df["N칰mero PDA"] == pda_num) & \
                     (df["Data Devolu칞칚o"].isna())
                     
            registros = df[filtro]
            
            if registros.empty:
                st.error("Registro n칚o encontrado ou PDA j치 devolvido!")
            else:
                # Atualiza data de devolu칞칚o
                idx = registros.index[0]
                df.at[idx, "Data Devolu칞칚o"] = datetime.now()
                save_data(df)
                st.success(f"PDA {pda_num} devolvido com sucesso!")
    
    # Exibir hist칩rico
    st.divider()
    st.subheader("Hist칩rico de Movimenta칞칫es")
    
    # Filtros para o hist칩rico
    col1, col2 = st.columns(2)
    with col1:
        filtrar_matricula = st.text_input("Filtrar por matr칤cula:").strip().upper()
    with col2:
        filtrar_pda = st.text_input("Filtrar por PDA:").strip().upper()
    
    # Aplicar filtros
    df_display = df.copy()
    if filtrar_matricula:
        df_display = df_display[df_display["Matr칤cula"] == filtrar_matricula]
    if filtrar_pda:
        df_display = df_display[df_display["N칰mero PDA"] == filtrar_pda]
    
    # Mostrar dataframe formatado
    st.dataframe(
        df_display.sort_values("Data Retirada", ascending=False),
        column_config={
            "Data Retirada": st.column_config.DatetimeColumn(format="DD/MM/YYYY HH:mm"),
            "Data Devolu칞칚o": st.column_config.DatetimeColumn(format="DD/MM/YYYY HH:mm")
        },
        hide_index=True,
        height=300
    )
    
    # Estat칤sticas
    st.divider()
    st.subheader("Estat칤sticas")
    
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("Total de PDAs", df["N칰mero PDA"].nunique())
    with col2:
        st.metric("Emprestados Ativos", df["Data Devolu칞칚o"].isna().sum())
    with col3:
        st.metric("Total de Movimenta칞칫es", len(df))

if __name__ == "__main__":
    main()
